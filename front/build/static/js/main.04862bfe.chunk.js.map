{"version":3,"sources":["components/massageModel.jsx","App.js","index.js"],"names":["MyMassageModel","props","handleUserBtn","e","fetchCurrentSender","fetchMassages","fetchMyMassages","field","document","getElementById","className","state","massages","users","myMassages","currentUser","currentSender","activeItem","id","text","picture","sender","reciever","getCookie","bind","fetchUsers","onChangeHandle","onSubmitHandle","fetchMassagesReload","scrollToTop","name","cookieValue","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","this","console","log","myId","fetch","then","response","json","data","setState","userId","target","value","val","active","csrftoken","method","headers","body","JSON","stringify","catch","error","element","scrollTop","scrollHeight","self","map","user","index","onClick","username","msg","time","type","onChange","Component","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.04862bfe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './massagesModel.css';\r\n\r\nclass MyMassageModel extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            massages: [],\r\n            users: [],\r\n            myMassages: [],\r\n            currentUser: [\r\n\r\n                {\r\n                    \"id\": 2,\r\n                    \"username\": \"admin\",\r\n                    \"email\": \"\"\r\n                }\r\n\r\n            ],\r\n            currentSender: [],\r\n            activeItem: {\r\n                id: null,\r\n                text: '',\r\n                picture: null,\r\n                sender: null,\r\n                reciever: null,\r\n            }\r\n        }\r\n\r\n        this.getCookie = this.getCookie.bind(this)\r\n        this.fetchMassages = this.fetchMassages.bind(this)\r\n        this.fetchMyMassages = this.fetchMyMassages.bind(this)\r\n        this.fetchUsers = this.fetchUsers.bind(this)\r\n        this.onChangeHandle = this.onChangeHandle.bind(this)\r\n        this.onSubmitHandle = this.onSubmitHandle.bind(this)\r\n        this.fetchCurrentSender = this.fetchCurrentSender.bind(this)\r\n        this.fetchMassagesReload = this.fetchMassagesReload.bind(this)\r\n        this.scrollToTop = this.scrollToTop.bind(this)\r\n    }\r\n\r\n    getCookie(name) {\r\n        var cookieValue = null;\r\n        if (document.cookie && document.cookie !== '') {\r\n            var cookies = document.cookie.split(';');\r\n            for (var i = 0; i < cookies.length; i++) {\r\n                var cookie = cookies[i].trim();\r\n                // Does this cookie string begin with the name we want?\r\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cookieValue;\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchUsers()\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToTop()\r\n    }\r\n\r\n\r\n    fetchUsers(e) {\r\n        console.log('Fetching users ...')\r\n        let myId = this.state.currentUser[0].id\r\n\r\n        fetch(`http://127.0.0.1:8000/u/${myId}`)\r\n            .then(response => response.json())\r\n            .then(data =>\r\n                this.setState({\r\n                    users: data\r\n                })\r\n            )\r\n    }\r\n\r\n    handleUserBtn = (e) => {\r\n        this.fetchCurrentSender(e)\r\n        this.fetchMassages(e)\r\n        this.fetchMyMassages(e)\r\n\r\n        var field = document.getElementById('msg');\r\n        var btn = document.getElementById('sbtn');\r\n\r\n        btn.className = 'sendbtn'\r\n        field.className = \"sendfield\"\r\n    }\r\n\r\n    fetchMassages(e) {\r\n        let userId = e.target.value\r\n        let myId = this.state.currentUser[0].id\r\n        console.log('Fetching msgs ...', userId, myId)\r\n\r\n        fetch(`http://127.0.0.1:8000/p/${userId}/${myId}`)\r\n            .then(response => response.json())\r\n            .then(data =>\r\n                this.setState({\r\n                    massages: data\r\n                })\r\n            )\r\n    }\r\n\r\n\r\n    fetchMyMassages(e) {\r\n        let userId = e.target.value\r\n        let myId = this.state.currentUser[0].id\r\n        console.log('Fetching msgs ...', myId, userId)\r\n\r\n        fetch(`http://127.0.0.1:8000/p/${myId}/${userId}`)\r\n            .then(response => response.json())\r\n            .then(data =>\r\n                this.setState({\r\n                    myMassages: data\r\n                })\r\n            )\r\n    }\r\n\r\n\r\n    fetchCurrentSender(e) {\r\n        let userId = e.target.value\r\n        console.log('Fetching current user ...', userId)\r\n\r\n        fetch(`http://127.0.0.1:8000/uf/${userId}`)\r\n            .then(response => response.json())\r\n            .then(data =>\r\n                this.setState({\r\n                    currentSender: data\r\n                })\r\n            )\r\n    }\r\n\r\n    onChangeHandle(e) {\r\n        var val = e.target.value;\r\n        let sender = this.state.currentSender[0].id\r\n        let reciever = this.state.currentUser[0].id\r\n\r\n        this.setState({\r\n            activeItem: {\r\n                id: null,\r\n                text: val,\r\n                picture: null,\r\n                sender: sender,\r\n                reciever: reciever,\r\n            }\r\n        })\r\n\r\n        console.log(\r\n            val, sender, reciever\r\n        )\r\n    }\r\n\r\n    onSubmitHandle() {\r\n        var active = this.state.activeItem;\r\n        console.log(active);\r\n\r\n    var csrftoken = this.getCookie('csrftoken')\r\n\r\n    var url = 'http://127.0.0.1:8000/m'\r\n\r\n\r\n    fetch(url, {\r\n      method:'POST',\r\n      headers:{\r\n        'Content-type':'application/json',\r\n        'X-CSRFToken':csrftoken,\r\n      },\r\n      body:JSON.stringify(this.state.activeItem)\r\n    }).catch(function(error){\r\n      console.log('ERROR:', error)\r\n    })\r\n\r\n    this.setState({\r\n            activeItem: {\r\n                id: null,\r\n                text: '',\r\n                picture: null,\r\n                sender: null,\r\n                reciever: null\r\n            }\r\n        })\r\n\r\n        this.fetchMassagesReload()\r\n\r\n    }\r\n\r\n    \r\n    fetchMassagesReload() {\r\n        let sender = this.state.currentSender[0].id\r\n        let reciever = this.state.currentUser[0].id\r\n\r\n        console.log('Fetching msgs ...', sender, reciever)\r\n\r\n        fetch(`http://127.0.0.1:8000/p/${sender}/${reciever}`)\r\n            .then(response => response.json())\r\n            .then(data =>\r\n                this.setState({\r\n                    massages: data\r\n                })\r\n            )\r\n\r\n        fetch(`http://127.0.0.1:8000/p/${reciever}/${sender}`)\r\n            .then(response => response.json())\r\n            .then(data =>\r\n                this.setState({\r\n                    myMassages: data\r\n                })\r\n            )\r\n    }\r\n\r\n    scrollToTop() {\r\n        var element = document.getElementById(\"sdbj\");\r\n        element.scrollTop = element.scrollHeight;\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        var massages = this.state.massages\r\n        var myMassages = this.state.myMassages\r\n        var users = this.state.users\r\n        var self = this\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"users\">\r\n                    <h3>Your massages</h3>\r\n                    {users.map(function (user, index) {\r\n                        return (\r\n                            <div className=\"user\" key={index}>\r\n\r\n                                <button value={user.id} onClick={self.handleUserBtn} className=\"UsernameButton\">\r\n                                    {user.username}\r\n                                </button>\r\n                            </div>)\r\n                    })}\r\n                </div>\r\n                <div className=\"msgBox\" id=\"sdbj\">\r\n                    <div className=\"sms\">\r\n                        {massages.map(function (msg, id) {\r\n                            return (\r\n                                <div className=\"msg\" key={id}>\r\n                                    <div className=\"textmsg\">\r\n                                        <p className='author'>{self.state.currentSender[0].username}</p>\r\n                                        <p className='value'>{msg.text}</p>\r\n                                        <p className=\"date\">{msg.time}</p>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    <div className=\"mms\">\r\n                        {myMassages.map(function (msg, id) {\r\n                            return (\r\n                                <div className=\"msg\" key={id}>\r\n                                    <div className=\"textmsg\">\r\n                                        <p className=\"date\">{msg.time}</p>\r\n                                        <p className='value'>{msg.text}</p>\r\n                                        <p className='author'>{self.state.currentUser[0].username}</p>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n\r\n                    <div className=\"sendbox fixed-bottom\">\r\n                        <input type=\"text\" name=\"msg\" id=\"msg\" className='hidden' value={this.state.activeItem.text} onChange={this.onChangeHandle} />\r\n                        <button className='hidden' id=\"sbtn\" onClick={this.onSubmitHandle}>Send</button>\r\n                    </div>\r\n                </div>\r\n            </div >);\r\n    }\r\n}\r\n\r\nexport default MyMassageModel;","import './App.css';\nimport React, { Component } from 'react';\nimport MyMassageModel from './components/massageModel';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <MyMassageModel />\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}